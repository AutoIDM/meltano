name: Tests

on:
  pull_request: {}
  push:
    branches: [main]
  workflow_dispatch:
    inputs: {}

jobs:
  tests:
    strategy:
      matrix:
        include:
        - { python-version: "3.7", os: "ubuntu-latest", backend-db: sqlite }
        - { python-version: "3.8", os: "ubuntu-latest", backend-db: sqlite }
        - { python-version: "3.9", os: "ubuntu-latest", backend-db: sqlite }
        - { python-version: "3.7", os: "ubuntu-latest", backend-db: postgresql }
        - { python-version: "3.8", os: "ubuntu-latest", backend-db: postgresql }
        - { python-version: "3.9", os: "ubuntu-latest", backend-db: postgresql }
        - { python-version: "3.7", os: "ubuntu-latest", backend-db: mssql }
        - { python-version: "3.8", os: "ubuntu-latest", backend-db: mssql }
        - { python-version: "3.9", os: "ubuntu-latest", backend-db: mssql }
        - { python-version: "3.7", os: "ubuntu-latest", backend-db: mysql }
        - { python-version: "3.8", os: "ubuntu-latest", backend-db: mysql }
        - { python-version: "3.9", os: "ubuntu-latest", backend-db: mysql }
      fail-fast: false

    name: "Pytest on py${{ matrix.python-version }} (OS: ${{ matrix.os }}, DB: ${{ matrix.backend-db }})"
    runs-on: ${{ matrix.os }}
    services:
      # Running a Postgres service even when it's not needed
      # (in tests using SQLite as backend) is wasteful but currently
      # there doesn't seem to be any way around that:
      # https://github.community/t/conditional-services-in-a-job/135301
      postgres:
        # Docker Hub image
        image: postgres:11
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      mssql:
        # SQL Server image
        image: mcr.microsoft.com/mssql/server:2019-latest
        # Provide the password for mssql
        env:
          SA_PASSWORD: Meltan0admin
          ACCEPT_EULA: "Y"
        # Set health checks to wait until mssql has started
        options: >-
          --health-cmd /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P $$SA_PASSWORD -Q "SELECT 1" -b -o /dev/null
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 1433 on service container to the host
          - 1433:1433
      mysql:
        # Mysql image
        image: mysql:8-oracle
        # Provide the password for mysql
        env:
          MYSQL_ROOT_PASSWORD: mysql
        # Set health checks to wait until mysql has started
        options: >-
          --health-cmd mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 3306 on service container to the host
          - 3306:3306
    env:
      PYTEST_MARKERS: not concurrent

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3.0.2

    - name: Install Poetry
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pipx install poetry
        poetry --version

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.0.0
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
        cache: 'poetry'

    - name: Upgrade pip
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pip install pip
        pip --version

    - name: Install Dependencies
      run: |
        poetry env use "${{ matrix.python-version }}"
        poetry install

    - name: Start Postgres Container
      if: always() && (matrix.backend-db == 'postgresql')
      run: >
        docker run -d
        -p "5432:5432"
        -e "POSTGRES_PASSWORD=postgres"
        --name postgres
        --health-cmd "pg_isready -d postgres -U postgres"
        --health-interval 10s
        --health-timeout 5s
        --health-retries 5
        postgres:11

    - name: Start MSSQL Container
      if: always() && (matrix.backend-db == 'mssql')
      run: >
        docker run -d
        -p "1433:1433"
        -e "SA_PASSWORD=Meltan0admin"
        -e "ACCEPT_EULA=Y"
        --name mssql
        --health-cmd "/opt/mssql-tools/bin/sqlcmd -U -P Meltan0admin -Q 'select 1' -b -o /dev/null"
        --health-interval 10s
        --health-timeout 5s
        --health-retries 5
        mcr.microsoft.com/mssql/server:2019-latest

    - name: Check running containers
      run: |
        docker ps -a

    - name: Run pytest
      env:
        PYTEST_BACKEND: ${{ matrix.backend-db }}

        # Postgres backend
        POSTGRES_HOST_AUTH_METHOD: trust
        POSTGRES_ADDRESS: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: pytest_warehouse

        # MSSQL backend
        MSSQL_ADDRESS: localhost
        MSSQL_PORT: 1433
        MSSQL_USER: sa
        MSSQL_PASSWORD: Meltan0admin
        MSSQL_DB: pytest_warehouse

        # MySQL backend
        MYSQL_ADDRESS: localhost
        MYSQL_PORT: 3306
        MYSQL_USER: root
        MYSQL_PASSWORD: mysql
        MYSQL_DB: pytest_warehouse
      run: |
        poetry run coverage run --parallel -m pytest -m "$PYTEST_MARKERS"

    - name: Upload coverage data
      if: always() && (matrix.python-version == '3.9')
      uses: actions/upload-artifact@v3.1.0
      with:
        name: coverage-data
        path: ".coverage.*"

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Check out the repository
      uses: actions/checkout@v3.0.2

    - name: Install Poetry
      run: |
        pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
        poetry --version

    - name: Set up Python
      uses: actions/setup-python@v4.0.0
      with:
        python-version: '3.9'
        cache: 'poetry'

    - name: Upgrade pip
      run: |
        pip install --constraint=.github/workflows/constraints.txt pip
        pip --version

    - name: Download coverage data
      uses: actions/download-artifact@v3.0.0
      with:
        name: coverage-data

    - name: Install Dependencies
      run: |
        poetry env use "3.9"
        poetry install

    - name: Combine coverage data and display human readable report
      run: |
        poetry run coverage combine
        poetry run coverage report --show-missing --ignore-errors

    - name: Create coverage report
      run: |
        poetry run coverage xml --ignore-errors

    - name: Upload coverage report
      uses: codecov/codecov-action@v3.1.0
